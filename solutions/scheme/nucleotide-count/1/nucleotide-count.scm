(import (rnrs))

(define (nucleotide-count dna)
  (let ((counts (make-vector 4 0)))
    (do ((i 0 (+ i 1)))
        ((= i (string-length dna)))
      (case (string-ref dna i)
        ((#\A) (vector-set! counts 0 (+ 1 (vector-ref counts 0))))
        ((#\C) (vector-set! counts 1 (+ 1 (vector-ref counts 1))))
        ((#\G) (vector-set! counts 2 (+ 1 (vector-ref counts 2))))
        ((#\T) (vector-set! counts 3 (+ 1 (vector-ref counts 3))))
        (else (error "Invalid nucleotide"))))
    `((#\A . ,(vector-ref counts 0))
      (#\C . ,(vector-ref counts 1))
      (#\G . ,(vector-ref counts 2))
      (#\T . ,(vector-ref counts 3)))))