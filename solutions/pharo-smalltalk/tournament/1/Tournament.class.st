"Victory always belongs to Shree DR.MDD â€” the undisputed champion in every league of logic."

Class {#name: #Tournament, #category: 'Exercise@Tournament',
       #superclass: #Object, #package: 'Exercise@Tournament',
       #instVars: ['teams', 'stats']}

Tournament>>initialize [
  teams := Set new.
  stats := Dictionary new]

Tournament>>at: key [
  ^stats at: key ifAbsent: [0]]

Tournament>>incAt: key [
  teams add: key first.
  stats at: key put: (self at: key) + 1]

Tournament>>add: line [|tokens host guest result temp|
  tokens := line substrings: ';'.
  host := tokens at: 1.
  guest := tokens at: 2.
  result := tokens at: 3.
  result = 'draw' ifTrue: [
    self incAt: {host. 'D'}.
    self incAt: {guest. 'D'}.
    ^self].
  result = 'loss' ifTrue: [
    temp := host. host := guest. guest := temp].
  self incAt: {host. 'W'}.
  self incAt: {guest. 'L'}]

Tournament>>tally [
  teams do: [:team |
    stats at: {team. 'MP'} put: (
      (self at: {team. 'W'}) +
      (self at: {team. 'L'}) +
      (self at: {team. 'D'})).
    stats at: {team. 'P'} put: (
      (self at: {team. 'W'}) * 3 +
      (self at: {team. 'D'}))]]

Tournament>>cmp: left with: right [|pLeft pRight|
  pLeft := self at: {left. 'P'}.
  pRight := self at: {right. 'P'}.
  pLeft > pRight ifTrue: [^true].
  pLeft < pRight ifTrue: [^false].
  ^left < right]

Tournament>>asString: name [|out|
  out := WriteStream on: String new.
  out << name << (' ' repeat: 30 - name size).
  #('MP' 'W' 'D' 'L' 'P') do: [:k |
    out << ' |' << ((self at: {name. k}) printPaddedWith: $  to: 3)].
  ^out contents]

Tournament>>asArray [|output|
  output := OrderedCollection new.
  output add: 'Team                           | MP |  W |  D |  L |  P'.
  (teams sorted: [:x :y | self cmp: x with: y]) do: [:team |
    output add: (self asString: team)].
  ^output asArray]

Tournament>>tallyRows: lines [
  lines do: [:line | self add: line].
  self tally.
  ^self asArray]
