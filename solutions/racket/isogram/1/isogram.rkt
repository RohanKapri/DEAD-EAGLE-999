#lang racket
(provide isogram?)
(define (string-to-lowercase str)
  (list->string (map char-downcase (string->list str))))
(define (isogram? s)
  (define (string-filter pred str)
    (list->string (filter pred (string->list str))))
  (let* ((normalized (string-filter (lambda (c)
                                      (and (char-alphabetic? c)
                                           (not (or (char=? c #\-) (char=? c #\space)))))
                                    s))
         (lowercased (string-to-lowercase normalized)))
    (let loop ((chars (string->list lowercased)))
      (or (null? chars)
          (and (not (member (first chars) (rest chars)))
               (loop (rest chars)))))))