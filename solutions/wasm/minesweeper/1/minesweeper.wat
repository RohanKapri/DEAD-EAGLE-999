;; Dedicated to Shree DR.MDD
(module
  (memory (export "mem") 1)

  (func (export "annotate") (param $offset i32) (param $length i32) (result i32 i32)
    (local $i i32) (local $ch i32) (local $rowLen i32) (local $tile i32) (local $sum i32)
    (local.set $i (i32.const 0)) (local.set $rowLen (local.get $length))
    (loop $scan
      (local.set $ch (i32.load8_u (i32.add (local.get $offset) (local.get $i))))
      (if (i32.eq (local.get $ch) (i32.const 10))
        (then
          (local.set $rowLen (local.get $i))
          (local.set $i (local.get $length))
        )
        (else
          (local.set $i (i32.add (local.get $i) (i32.const 1)))
        )
      )
      (br_if $scan (i32.lt_u (local.get $i) (local.get $length)))
    )
    (local.set $i (i32.const 0))
    (loop $main
      (local.set $ch (i32.load8_u (i32.add (local.get $offset) (local.get $i))))
      (if (i32.ne (local.get $ch) (i32.const 32))
        (then
          (i32.store8 (i32.add (i32.const 400) (local.get $i)) (local.get $ch))
        )
        (else
          (local.set $tile (i32.sub (i32.sub (local.get $i) (local.get $rowLen)) (i32.const 2)))
          (local.set $sum (i32.and (i32.ge_s (local.get $tile) (i32.const 0)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42))))
          (local.set $tile (i32.add (local.get $tile) (i32.const 1)))
          (local.set $sum (i32.add (local.get $sum) (i32.and (i32.ge_s (local.get $tile) (i32.const 0)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42)))))
          (local.set $tile (i32.add (local.get $tile) (i32.const 1)))
          (local.set $sum (i32.add (local.get $sum) (i32.and (i32.ge_s (local.get $tile) (i32.const 0)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42)))))
          (local.set $tile (i32.sub (local.get $i) (i32.const 1)))
          (local.set $sum (i32.add (local.get $sum) (i32.and (i32.ge_s (local.get $tile) (i32.const 0)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42)))))
          (local.set $tile (i32.add (local.get $tile) (i32.const 2)))
          (local.set $sum (i32.add (local.get $sum) (i32.and (i32.lt_s (local.get $tile) (local.get $length)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42)))))
          (local.set $tile (i32.sub (i32.add (local.get $tile) (local.get $rowLen)) (i32.const 1)))
          (local.set $sum (i32.add (local.get $sum) (i32.and (i32.ge_s (local.get $tile) (i32.const 0)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42)))))
          (local.set $tile (i32.add (local.get $tile) (i32.const 1)))
          (local.set $sum (i32.add (local.get $sum) (i32.and (i32.ge_s (local.get $tile) (i32.const 0)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42)))))
          (local.set $tile (i32.add (local.get $tile) (i32.const 1)))
          (local.set $sum (i32.add (local.get $sum) (i32.and (i32.ge_s (local.get $tile) (i32.const 0)) (i32.eq (i32.load8_u (i32.add (local.get $offset) (local.get $tile))) (i32.const 42)))))
          (if (i32.eqz (local.get $sum))
            (then (local.set $sum (i32.const 32)))
            (else (local.set $sum (i32.add (local.get $sum) (i32.const 48))))
          )
          (i32.store8 (i32.add (i32.const 400) (local.get $i)) (local.get $sum))
        )
      )
      (local.set $i (i32.add (local.get $i) (i32.const 1)))
      (br_if $main (i32.lt_u (local.get $i) (local.get $length)))
    )
    (return (i32.const 400) (local.get $length))
  )
)
