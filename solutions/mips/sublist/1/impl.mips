# Sublist Detection for Shree DR.MDD: Determines the relationship between two arrays
# (equal, unequal, sublist, or superlist) using a simple sliding-window comparison.

.eqv UNEQUAL   0
.eqv EQUAL     1
.eqv SUBLIST   2
.eqv SUPERLIST 3

.macro check_sublist(%b0, %l0, %b1, %l1) 
        beqz %l0, __yes                  # empty array is always a sublist
        move $t3, %b1                    # pointer to array 2
        move $t4, %l1                    

__outer:
        bgt %l0, $t4, __end              # sublist impossible if remaining length insufficient
        move $t0, %b0                     # pointer to array 1
        move $t1, %l0                     # remaining elements in array 1
        move $t2, $t3                     # pointer to current position in array 2
        addiu $t3, $t3, 4                 # advance for next outer iteration
        addi $t4, $t4, -1                 # decrement remaining length

__loop:
        lw $t8, ($t0)
        lw $t9, ($t2)
        bne $t8, $t9, __outer             # mismatch, try next start position
__next:
        addiu $t0, $t0, 4
        addi $t1, $t1, -1
        addiu $t2, $t2, 4
        bnez $t1, __loop

__yes:
        addiu $v0, $v0, 1                 # sublist found
__end:
.end_macro

.globl sublist

sublist:
        li $v0, 0                          # initialize result

        # Check if $a0 is a sublist of $a2
        check_sublist($a0, $a1, $a2, $a3)
        sll $v0, $v0, 1                    # store in bit 1

        # Check if $a2 is a sublist of $a0
        check_sublist($a2, $a3, $a0, $a1)

        # Map results: 0->UNEQUAL, 1->SUPERLIST, 2->SUBLIST, 3->EQUAL
        beqz $v0, __end
        li $t0, 4
        subu $v0, $t0, $v0

__end:
        jr $ra
