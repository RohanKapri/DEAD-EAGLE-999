       IDENTIFICATION DIVISION.
       PROGRAM-ID. KNAPSACK.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-INPUTS.
           05 MAXIMUM-WEIGHT    PIC 999.
           05 NO-OF-ITEMS       PIC 99.
           05 WS-CURRENT-BEST   PIC 999.
           05 WS-CURRENT-WEIGHT PIC 999.
           05 WS-CURRENT-VALUE  PIC 999.
           05 WS-IDX            PIC 99 OCCURS 15 TIMES.
           05 WS-LEVEL          PIC 99.
           05 KNAPSACKTABLE     .
            07 filler OCCURS 1 TO 20 DEPENDING ON NO-OF-ITEMS.
              10 WS-WEIGHT      PIC 999.
              10 WS-VALUE       PIC 999.
              10 WS-USED        PIC X.

       01 WS-OUTPUTS.
           05 WS-RESULT         PIC 99999.

       PROCEDURE DIVISION.

       MAXIMUM-VALUE. 
      * KNAPSACK IS A NP-COMPLETE PROBLEM, MEANING IT CAN TAKE AN EXTREMELY LONG TIME 
      * TO CALCULATE BRUTE FORCE, BUT IN THIS CASE, WHERE THERE ARE A LIMITED AMOUNT 
      * OF ITEMS, BRUTE FORCE IS A VALID APPROACH
      * THIS SOLUTION WILL RECURSIVELY CALL THE SAME SECTION, TO TRY OUT ALL COMBINATIONS.
         PERFORM INITIALIZATIONS
         PERFORM NEXT-RECURSION
         MOVE WS-CURRENT-BEST TO WS-RESULT
         .
         NEXT-RECURSION.
            ADD 1 TO WS-LEVEL
            IF WS-LEVEL > 15 
               SUBTRACT 1 FROM WS-LEVEL GIVING WS-LEVEL
               EXIT SECTION
            END-IF
            PERFORM VARYING WS-IDX(WS-LEVEL) FROM WS-IDX(WS-LEVEL - 1)
               UNTIL WS-IDX(WS-LEVEL) > NO-OF-ITEMS
               IF WS-USED(WS-IDX(WS-LEVEL)) = 'N'
               and (WS-WEIGHT(WS-IDX(WS-LEVEL)) + WS-CURRENT-WEIGHT) 
                  < MAXIMUM-WEIGHT
                  PERFORM ADD-TO-CURRENT
                  PERFORM EVALUATE-BEST
               END-IF
               PERFORM NEXT-RECURSION
               IF WS-USED(WS-IDX(WS-LEVEL)) = 'Y'
                  PERFORM SUBTRACT-FROM-CURRENT
               END-IF
            END-PERFORM
            SUBTRACT 1 FROM WS-LEVEL GIVING WS-LEVEL
         .
         INITIALIZATIONS.
            MOVE ZERO 
               TO WS-CURRENT-BEST
                  WS-CURRENT-WEIGHT   
                  WS-CURRENT-VALUE
            MOVE 1 TO WS-LEVEL
            PERFORM VARYING WS-IDX(WS-LEVEL) FROM 1 
               UNTIL WS-IDX(WS-LEVEL) > NO-OF-ITEMS
               MOVE 'N' TO WS-USED(WS-IDX(WS-LEVEL))
            END-PERFORM
            MOVE 1 TO WS-IDX(WS-LEVEL)
         .
         ADD-TO-CURRENT.
            MOVE 'Y' TO WS-USED(WS-IDX(WS-LEVEL))
            ADD WS-WEIGHT(WS-IDX(WS-LEVEL)) TO WS-CURRENT-WEIGHT
            ADD WS-VALUE(WS-IDX(WS-LEVEL)) TO WS-CURRENT-VALUE
         .
         SUBTRACT-FROM-CURRENT.
            MOVE 'N' TO WS-USED(WS-IDX(WS-LEVEL))
            SUBTRACT WS-WEIGHT(WS-IDX(WS-LEVEL)) FROM WS-CURRENT-WEIGHT             
               GIVING WS-CURRENT-WEIGHT
            SUBTRACT WS-VALUE(WS-IDX(WS-LEVEL)) FROM WS-CURRENT-VALUE
               GIVING WS-CURRENT-VALUE
         .
         EVALUATE-BEST.
            IF WS-CURRENT-VALUE > WS-CURRENT-BEST
               MOVE WS-CURRENT-VALUE TO WS-CURRENT-BEST
            END-IF
         .